---
- name: WinRM Ports
  hosts: localhost
  connection: localhost
  gather_facts: false
  tasks:
    - name: Find WinRM Port(s) and Output .winrm files for Molecule
      command: python3 -
      args:
        stdin: |
          import yaml
          import os
          import re
          from os.path import expanduser

          cwd = os.getcwd()
          cwd_split = cwd.split('/')
          role_index = cwd_split.index("molecule") - 1
          role_dir_name = cwd_split[role_index]
          home = expanduser("~")

          molecule_yml_path = "{cwd}/molecule.yml".format(cwd=cwd)
          molecule_cache_path = "{home}/.cache/molecule/{role_dir_name}/default".format(home=home,role_dir_name=role_dir_name)

          with open(molecule_yml_path, 'r') as stream:
              try:
                  molecule = yaml.safe_load(stream)
              except yaml.YAMLError as exc:
                  print(exc)
          stream.close()

          platforms = []
          for item in molecule["platforms"]:
              platforms.append(item["name"])

          for platform in platforms:
              vagrant_log_path = "{c}/vagrant-{r}.out".format(c=molecule_cache_path,r=platform)
              vagrant_log_text = open(vagrant_log_path, "r").read()
              winrm_port = (re.findall("WinRM address.*", vagrant_log_text)[-1]).split(':')[-1]

              if winrm_port:
                  f = open("{molecule_dir_path}/{platform}.winrm".format(molecule_dir_path=cwd,platform=platform),"w")
                  f.write(winrm_port)
              f.close()

- name: Prepare
  hosts: all
  gather_facts: false
  tasks:
    - name: Optimize PowerShell
      win_command: powershell.exe -
      args:
        stdin: |
          function Optimize-PowershellAssemblies {
            # NGEN powershell assembly, improves startup time of powershell by 10x
            $old_path = $env:path
            try {
              $env:path = [Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory()
              [AppDomain]::CurrentDomain.GetAssemblies() | % {
                if (! $_.location) {continue}
                $Name = Split-Path $_.location -leaf
                if ($Name.startswith("Microsoft.PowerShell.")) {
                  Write-Progress -Activity "Native Image Installation" -Status "$name"
                  ngen install $_.location | % {"`t$_"}
                }
              }
            } finally {
              $env:path = $old_path
            }
          }
          Optimize-PowershellAssemblies
      register: optimize_posh
      changed_when: "'Compiling assembly' in optimize_posh.stdout"
